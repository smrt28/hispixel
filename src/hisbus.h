/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __HISBUS_H__
#define __HISBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.hispixel.GDBUS */

#define HIS_PIXEL_TYPE_GDBUS (his_pixel_gdbus_get_type ())
#define HIS_PIXEL_GDBUS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HIS_PIXEL_TYPE_GDBUS, HisPixelGDBUS))
#define HIS_PIXEL_IS_GDBUS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HIS_PIXEL_TYPE_GDBUS))
#define HIS_PIXEL_GDBUS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), HIS_PIXEL_TYPE_GDBUS, HisPixelGDBUSIface))

struct _HisPixelGDBUS;
typedef struct _HisPixelGDBUS HisPixelGDBUS;
typedef struct _HisPixelGDBUSIface HisPixelGDBUSIface;

struct _HisPixelGDBUSIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_rpc) (
    HisPixelGDBUS *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_request);

};

GType his_pixel_gdbus_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *his_pixel_gdbus_interface_info (void);
guint his_pixel_gdbus_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void his_pixel_gdbus_complete_rpc (
    HisPixelGDBUS *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);



/* D-Bus method calls: */
void his_pixel_gdbus_call_rpc (
    HisPixelGDBUS *proxy,
    const gchar *arg_request,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean his_pixel_gdbus_call_rpc_finish (
    HisPixelGDBUS *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean his_pixel_gdbus_call_rpc_sync (
    HisPixelGDBUS *proxy,
    const gchar *arg_request,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define HIS_PIXEL_TYPE_GDBUS_PROXY (his_pixel_gdbus_proxy_get_type ())
#define HIS_PIXEL_GDBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HIS_PIXEL_TYPE_GDBUS_PROXY, HisPixelGDBUSProxy))
#define HIS_PIXEL_GDBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HIS_PIXEL_TYPE_GDBUS_PROXY, HisPixelGDBUSProxyClass))
#define HIS_PIXEL_GDBUS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HIS_PIXEL_TYPE_GDBUS_PROXY, HisPixelGDBUSProxyClass))
#define HIS_PIXEL_IS_GDBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HIS_PIXEL_TYPE_GDBUS_PROXY))
#define HIS_PIXEL_IS_GDBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HIS_PIXEL_TYPE_GDBUS_PROXY))

typedef struct _HisPixelGDBUSProxy HisPixelGDBUSProxy;
typedef struct _HisPixelGDBUSProxyClass HisPixelGDBUSProxyClass;
typedef struct _HisPixelGDBUSProxyPrivate HisPixelGDBUSProxyPrivate;

struct _HisPixelGDBUSProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  HisPixelGDBUSProxyPrivate *priv;
};

struct _HisPixelGDBUSProxyClass
{
  GDBusProxyClass parent_class;
};

GType his_pixel_gdbus_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (HisPixelGDBUSProxy, g_object_unref)
#endif

void his_pixel_gdbus_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
HisPixelGDBUS *his_pixel_gdbus_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
HisPixelGDBUS *his_pixel_gdbus_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void his_pixel_gdbus_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
HisPixelGDBUS *his_pixel_gdbus_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
HisPixelGDBUS *his_pixel_gdbus_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define HIS_PIXEL_TYPE_GDBUS_SKELETON (his_pixel_gdbus_skeleton_get_type ())
#define HIS_PIXEL_GDBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HIS_PIXEL_TYPE_GDBUS_SKELETON, HisPixelGDBUSSkeleton))
#define HIS_PIXEL_GDBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HIS_PIXEL_TYPE_GDBUS_SKELETON, HisPixelGDBUSSkeletonClass))
#define HIS_PIXEL_GDBUS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HIS_PIXEL_TYPE_GDBUS_SKELETON, HisPixelGDBUSSkeletonClass))
#define HIS_PIXEL_IS_GDBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HIS_PIXEL_TYPE_GDBUS_SKELETON))
#define HIS_PIXEL_IS_GDBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HIS_PIXEL_TYPE_GDBUS_SKELETON))

typedef struct _HisPixelGDBUSSkeleton HisPixelGDBUSSkeleton;
typedef struct _HisPixelGDBUSSkeletonClass HisPixelGDBUSSkeletonClass;
typedef struct _HisPixelGDBUSSkeletonPrivate HisPixelGDBUSSkeletonPrivate;

struct _HisPixelGDBUSSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  HisPixelGDBUSSkeletonPrivate *priv;
};

struct _HisPixelGDBUSSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType his_pixel_gdbus_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (HisPixelGDBUSSkeleton, g_object_unref)
#endif

HisPixelGDBUS *his_pixel_gdbus_skeleton_new (void);


G_END_DECLS

#endif /* __HISBUS_H__ */
